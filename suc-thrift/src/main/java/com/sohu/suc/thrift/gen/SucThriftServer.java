/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.suc.thrift.gen;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class SucThriftServer implements org.apache.thrift.TBase<SucThriftServer, SucThriftServer._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SucThriftServer");

    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serverName", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.I32, (short) 4);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short) 5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new SucThriftServerStandardSchemeFactory());
        schemes.put(TupleScheme.class, new SucThriftServerTupleSchemeFactory());
    }

    public String host; // required
    public int port; // required
    public String serverName; // required
    public int weight; // required
    public long startTime; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        HOST((short) 1, "host"),
        PORT((short) 2, "port"),
        SERVER_NAME((short) 3, "serverName"),
        WEIGHT((short) 4, "weight"),
        START_TIME((short) 5, "startTime");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // HOST
                    return HOST;
                case 2: // PORT
                    return PORT;
                case 3: // SERVER_NAME
                    return SERVER_NAME;
                case 4: // WEIGHT
                    return WEIGHT;
                case 5: // START_TIME
                    return START_TIME;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __WEIGHT_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SERVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("serverName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SucThriftServer.class, metaDataMap);
    }

    public SucThriftServer() {
    }

    public SucThriftServer(
            String host,
            int port,
            String serverName,
            int weight,
            long startTime) {
        this();
        this.host = host;
        this.port = port;
        setPortIsSet(true);
        this.serverName = serverName;
        this.weight = weight;
        setWeightIsSet(true);
        this.startTime = startTime;
        setStartTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SucThriftServer(SucThriftServer other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetHost()) {
            this.host = other.host;
        }
        this.port = other.port;
        if (other.isSetServerName()) {
            this.serverName = other.serverName;
        }
        this.weight = other.weight;
        this.startTime = other.startTime;
    }

    public SucThriftServer deepCopy() {
        return new SucThriftServer(this);
    }

    @Override
    public void clear() {
        this.host = null;
        setPortIsSet(false);
        this.port = 0;
        this.serverName = null;
        setWeightIsSet(false);
        this.weight = 0;
        setStartTimeIsSet(false);
        this.startTime = 0;
    }

    public String getHost() {
        return this.host;
    }

    public SucThriftServer setHost(String host) {
        this.host = host;
        return this;
    }

    public void unsetHost() {
        this.host = null;
    }

    /**
     * Returns true if field host is set (has been assigned a value) and false otherwise
     */
    public boolean isSetHost() {
        return this.host != null;
    }

    public void setHostIsSet(boolean value) {
        if (!value) {
            this.host = null;
        }
    }

    public int getPort() {
        return this.port;
    }

    public SucThriftServer setPort(int port) {
        this.port = port;
        setPortIsSet(true);
        return this;
    }

    public void unsetPort() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /**
     * Returns true if field port is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPort() {
        return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public String getServerName() {
        return this.serverName;
    }

    public SucThriftServer setServerName(String serverName) {
        this.serverName = serverName;
        return this;
    }

    public void unsetServerName() {
        this.serverName = null;
    }

    /**
     * Returns true if field serverName is set (has been assigned a value) and false otherwise
     */
    public boolean isSetServerName() {
        return this.serverName != null;
    }

    public void setServerNameIsSet(boolean value) {
        if (!value) {
            this.serverName = null;
        }
    }

    public int getWeight() {
        return this.weight;
    }

    public SucThriftServer setWeight(int weight) {
        this.weight = weight;
        setWeightIsSet(true);
        return this;
    }

    public void unsetWeight() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    /**
     * Returns true if field weight is set (has been assigned a value) and false otherwise
     */
    public boolean isSetWeight() {
        return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    public void setWeightIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
    }

    public long getStartTime() {
        return this.startTime;
    }

    public SucThriftServer setStartTime(long startTime) {
        this.startTime = startTime;
        setStartTimeIsSet(true);
        return this;
    }

    public void unsetStartTime() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /**
     * Returns true if field startTime is set (has been assigned a value) and false otherwise
     */
    public boolean isSetStartTime() {
        return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case HOST:
                if (value == null) {
                    unsetHost();
                } else {
                    setHost((String) value);
                }
                break;

            case PORT:
                if (value == null) {
                    unsetPort();
                } else {
                    setPort((Integer) value);
                }
                break;

            case SERVER_NAME:
                if (value == null) {
                    unsetServerName();
                } else {
                    setServerName((String) value);
                }
                break;

            case WEIGHT:
                if (value == null) {
                    unsetWeight();
                } else {
                    setWeight((Integer) value);
                }
                break;

            case START_TIME:
                if (value == null) {
                    unsetStartTime();
                } else {
                    setStartTime((Long) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case HOST:
                return getHost();

            case PORT:
                return Integer.valueOf(getPort());

            case SERVER_NAME:
                return getServerName();

            case WEIGHT:
                return Integer.valueOf(getWeight());

            case START_TIME:
                return Long.valueOf(getStartTime());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case HOST:
                return isSetHost();
            case PORT:
                return isSetPort();
            case SERVER_NAME:
                return isSetServerName();
            case WEIGHT:
                return isSetWeight();
            case START_TIME:
                return isSetStartTime();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof SucThriftServer)
            return this.equals((SucThriftServer) that);
        return false;
    }

    public boolean equals(SucThriftServer that) {
        if (that == null)
            return false;

        boolean this_present_host = true && this.isSetHost();
        boolean that_present_host = true && that.isSetHost();
        if (this_present_host || that_present_host) {
            if (!(this_present_host && that_present_host))
                return false;
            if (!this.host.equals(that.host))
                return false;
        }

        boolean this_present_port = true;
        boolean that_present_port = true;
        if (this_present_port || that_present_port) {
            if (!(this_present_port && that_present_port))
                return false;
            if (this.port != that.port)
                return false;
        }

        boolean this_present_serverName = true && this.isSetServerName();
        boolean that_present_serverName = true && that.isSetServerName();
        if (this_present_serverName || that_present_serverName) {
            if (!(this_present_serverName && that_present_serverName))
                return false;
            if (!this.serverName.equals(that.serverName))
                return false;
        }

        boolean this_present_weight = true;
        boolean that_present_weight = true;
        if (this_present_weight || that_present_weight) {
            if (!(this_present_weight && that_present_weight))
                return false;
            if (this.weight != that.weight)
                return false;
        }

        boolean this_present_startTime = true;
        boolean that_present_startTime = true;
        if (this_present_startTime || that_present_startTime) {
            if (!(this_present_startTime && that_present_startTime))
                return false;
            if (this.startTime != that.startTime)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(SucThriftServer other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        SucThriftServer typedOther = (SucThriftServer) other;

        lastComparison = Boolean.valueOf(isSetHost()).compareTo(typedOther.isSetHost());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHost()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, typedOther.host);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPort()).compareTo(typedOther.isSetPort());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPort()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, typedOther.port);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetServerName()).compareTo(typedOther.isSetServerName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetServerName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverName, typedOther.serverName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetWeight()).compareTo(typedOther.isSetWeight());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetWeight()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, typedOther.weight);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStartTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SucThriftServer(");
        boolean first = true;

        sb.append("host:");
        if (this.host == null) {
            sb.append("null");
        } else {
            sb.append(this.host);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("port:");
        sb.append(this.port);
        first = false;
        if (!first) sb.append(", ");
        sb.append("serverName:");
        if (this.serverName == null) {
            sb.append("null");
        } else {
            sb.append(this.serverName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("weight:");
        sb.append(this.weight);
        first = false;
        if (!first) sb.append(", ");
        sb.append("startTime:");
        sb.append(this.startTime);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class SucThriftServerStandardSchemeFactory implements SchemeFactory {
        public SucThriftServerStandardScheme getScheme() {
            return new SucThriftServerStandardScheme();
        }
    }

    private static class SucThriftServerStandardScheme extends StandardScheme<SucThriftServer> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, SucThriftServer struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // HOST
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.host = iprot.readString();
                            struct.setHostIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // PORT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.port = iprot.readI32();
                            struct.setPortIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // SERVER_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.serverName = iprot.readString();
                            struct.setServerNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // WEIGHT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.weight = iprot.readI32();
                            struct.setWeightIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // START_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.startTime = iprot.readI64();
                            struct.setStartTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, SucThriftServer struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.host != null) {
                oprot.writeFieldBegin(HOST_FIELD_DESC);
                oprot.writeString(struct.host);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(PORT_FIELD_DESC);
            oprot.writeI32(struct.port);
            oprot.writeFieldEnd();
            if (struct.serverName != null) {
                oprot.writeFieldBegin(SERVER_NAME_FIELD_DESC);
                oprot.writeString(struct.serverName);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
            oprot.writeI32(struct.weight);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(START_TIME_FIELD_DESC);
            oprot.writeI64(struct.startTime);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SucThriftServerTupleSchemeFactory implements SchemeFactory {
        public SucThriftServerTupleScheme getScheme() {
            return new SucThriftServerTupleScheme();
        }
    }

    private static class SucThriftServerTupleScheme extends TupleScheme<SucThriftServer> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, SucThriftServer struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetHost()) {
                optionals.set(0);
            }
            if (struct.isSetPort()) {
                optionals.set(1);
            }
            if (struct.isSetServerName()) {
                optionals.set(2);
            }
            if (struct.isSetWeight()) {
                optionals.set(3);
            }
            if (struct.isSetStartTime()) {
                optionals.set(4);
            }
            oprot.writeBitSet(optionals, 5);
            if (struct.isSetHost()) {
                oprot.writeString(struct.host);
            }
            if (struct.isSetPort()) {
                oprot.writeI32(struct.port);
            }
            if (struct.isSetServerName()) {
                oprot.writeString(struct.serverName);
            }
            if (struct.isSetWeight()) {
                oprot.writeI32(struct.weight);
            }
            if (struct.isSetStartTime()) {
                oprot.writeI64(struct.startTime);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, SucThriftServer struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(5);
            if (incoming.get(0)) {
                struct.host = iprot.readString();
                struct.setHostIsSet(true);
            }
            if (incoming.get(1)) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
            }
            if (incoming.get(2)) {
                struct.serverName = iprot.readString();
                struct.setServerNameIsSet(true);
            }
            if (incoming.get(3)) {
                struct.weight = iprot.readI32();
                struct.setWeightIsSet(true);
            }
            if (incoming.get(4)) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
            }
        }
    }

}

